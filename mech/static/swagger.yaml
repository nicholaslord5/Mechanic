openapi: 3.0.0
info:
  title: MechAPI
  version: 1.0.0
  description: |
    A RESTful API for managing customers, mechanics, service tickets, and inventory parts.
    Provides user registration, authentication, and CRUD operations secured by JWT.
  contact:
    name: Nicholas Lord
    email: nicholas@nicholaslord.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://mechanic-ny9i.onrender.com

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
      example:
        error: "Missing or invalid Authorization header"

    IdResponse:
      type: object
      properties:
        id:
          type: integer
      example:
        id: 42

    MessageResponse:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Deleted successfully"

    Meta:
      type: object
      properties:
        page: { type: integer }
        per_page: { type: integer }
        total: { type: integer }
        pages: { type: integer }
      example:
        page: 1
        per_page: 10
        total: 25
        pages: 3

    CustomerCreate:
      type: object
      required:
        - name
        - email
        - phone
        - password
      properties:
        name: { type: string, example: "Jane Doe" }
        email: { type: string, format: email, example: "jane@example.com" }
        phone: { type: string, example: "555-1234" }
        password: { type: string, example: "Password123" }

    Customer:
      allOf:
        - $ref: '#/components/schemas/CustomerCreate'
        - type: object
          properties:
            id: { type: integer, example: 1 }

    CustomerLogin:
      type: object
      required:
        - email
        - password
      properties:
        email: { type: string, format: email, example: "jane@example.com" }
        password: { type: string, example: "Password123" }

    CustomerAuthResponse:
      type: object
      properties:
        status: { type: string, example: "success" }
        customer: { type: integer, example: 1 }
        auth_token: { type: string, example: "eyJhbGciOiJIUzI1NiIs..." }

    CustomerUpdate:
      type: object
      properties:
        name: { type: string }
        email: { type: string, format: email }
        phone: { type: string }

    MechanicCreate:
      type: object
      required:
        - name
        - email
        - phone
        - salary
        - password
      properties:
        name: { type: string, example: "John Mechanic" }
        email: { type: string, format: email, example: "john@ex.com" }
        phone: { type: string, example: "555-2000" }
        salary: { type: integer, example: 50000 }
        password: { type: string, example: "MechPass" }

    Mechanic:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        salary: { type: integer }

    MechanicLogin:
      type: object
      required:
        - email
        - password
      properties:
        email: { type: string, format: email, example: "john@ex.com" }
        password: { type: string, example: "MechPass" }

    MechanicAuthResponse:
      type: object
      properties:
        auth_token: { type: string, example: "eehaerKHIEYIRKkewhre..." }

    MechanicUpdate:
      type: object
      properties:
        name: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        salary: { type: integer }
        password: { type: string }

    ServiceTicketCreate:
      type: object
      required:
        - vin
        - service_date
        - service_desc
        - customer_id
      properties:
        vin: { type: string, example: "11AEK790EKRKJER12" }
        service_date: { type: string, format: date, example: "2025-05-01" }
        service_desc: { type: string, example: "Oil change" }
        customer_id: { type: integer, example: 1 }

    ServiceTicket:
      allOf:
        - $ref: '#/components/schemas/ServiceTicketCreate'
        - type: object
          properties:
            id: { type: integer, example: 100 }

    ServiceTicketUpdate:
      type: object
      properties:
        vin: { type: string }
        service_date: { type: string, format: date }
        service_desc: { type: string }
        customer_id: { type: integer }

    InventoryCreate:
      type: object
      required:
        - name
        - price
      properties:
        name: { type: string, example: "Brake Pad" }
        price: { type: number, example: 9.99 }

    Inventory:
      allOf:
        - $ref: '#/components/schemas/InventoryCreate'
        - type: object
          properties:
            id: { type: integer, example: 5 }

    InventoryUpdate:
      type: object
      properties:
        name: { type: string }
        price: { type: number }

paths:
  /customers:
    post:
      tags:
        - Customers
      summary: Create a new customer
      description: Register a new customer by providing name, email, phone, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreate'
            example:
              name: "Jane Doe"
              email: "jane@example.com"
              phone: "555-1234"
              password: "Password123"
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Customers
      summary: List customers (paginated)
      description: Retrieve customers with pagination.
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: per_page
          schema: { type: integer, default: 10 }
      responses:
        '200':
          description: A paginated list of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  customers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  meta:
                    $ref: '#/components/schemas/Meta'
    delete:
      tags:
        - Customers
      summary: Delete the authenticated customer
      description: Delete the customer associated with the provided JWT.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Customer deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers/login:
    post:
      tags:
        - Customers
      summary: Customer login (get JWT)
      description: Authenticate and receive a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerLogin'
            example:
              email: "jane@example.com"
              password: "Password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAuthResponse'
        '400':
          description: Missing credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers/{id}:
    put:
      tags:
        - Customers
      summary: Update a customer by ID
      description: Modify customer details. Only provided fields will be updated.
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdate'
            example:
              phone: "999-9999"
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /mechanics/login:
    post:
      tags:
        - Mechanics
      summary: Mechanic login (get JWT)
      description: Authenticate mechanic and receive a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MechanicLogin'
            example:
              email: "john@ex.com"
              password: "MechPass"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MechanicAuthResponse'
        '400':
          description: Missing credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

definitions:
  #### Generic wrappers ####
  MessageResponse:
    type: object
    properties:
      message:
        type: string
    example:
      message: "Deleted successfully"

  ErrorResponse:
    type: object
    properties:
      error:
        type: string
    example:
      error: "Missing or invalid Authorization header"

  IdResponse:
    type: object
    properties:
      id:
        type: integer
    example:
      id: 42

  Meta:
    type: object
    properties:
      page:
        type: integer
      per_page:
        type: integer
      total:
        type: integer
      pages:
        type: integer
    example:
      page: 1
      per_page: 10
      total: 25
      pages: 3

  #### Customer models ####
  CustomerCreate:
    type: object
    required: [name, email, phone, password]
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
  Customer:
    allOf:
      - $ref: "#/definitions/CustomerCreate"
      - type: object
        properties:
          id:
            type: integer
  CustomerLogin:
    type: object
    required: [email, password]
    properties:
      email:
        type: string
      password:
        type: string
  CustomerAuthResponse:
    type: object
    properties:
      status:
        type: string
      customer:
        type: integer
      auth_token:
        type: string

  #### Mechanic models ###
  MechanicCreate:
    type: object
    required: [name, email, phone, salary, password]
    properties:
      name: { type: string }
      email: { type: string }
      phone: { type: string }
      salary: { type: integer }
      password: { type: string }
  Mechanic:
    type: object
    properties:
      id: { type: integer }
      name: { type: string }
      email: { type: string }
      phone: { type: string }
      salary: { type: integer }
  MechanicLogin:
    type: object
    required: [email, password]
    properties:
      email: { type: string }
      password: { type: string }
  MechanicAuthResponse:
    type: object
    properties:
      auth_token: { type: string }
  MechanicUpdate:
    allOf:
      - $ref: "#/definitions/MechanicCreate"
      - type: object
        properties:
          password: { type: string }

  #### Inventory models ###
  InventoryCreate:
    type: object
    required: [name, price]
    properties:
      name: { type: string }
      price: { type: number }
  Inventory:
    allOf:
      - $ref: "#/definitions/InventoryCreate"
      - type: object
        properties:
          id: { type: integer }
  InventoryUpdate:
    type: object
    properties:
      name: { type: string }
      price: { type: number }

  #### ServiceTicket models ###
  ServiceTicketCreate:
    type: object
    required: [vin, service_date, service_desc, customer_id]
    properties:
      vin: { type: string }
      service_date: { type: string, format: date }
      service_desc: { type: string }
      customer_id: { type: integer }
  ServiceTicket:
    allOf:
      - $ref: "#/definitions/ServiceTicketCreate"
      - type: object
        properties:
          id: { type: integer }
          mechanics:
            type: array
            items:
              type: object
              properties:
                id: { type: integer }
                name: { type: string }
  ServiceTicketUpdate:
    type: object
    properties:
      vin: { type: string }
      service_date: { type: string, format: date }
      service_desc: { type: string }
      customer_id: { type: integer }
